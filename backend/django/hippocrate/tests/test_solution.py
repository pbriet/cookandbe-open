

from common.test                        import OptalimTest
from hippocrate.models.problem          import Problem
from hippocrate.models.recipestorage    import MainRecipeStorage
from mock                               import patch
from optalim.config                     import Config

class TestGeneratedSolutionIsValid(OptalimTest):
    """
    Test that a solution is valid after all these steps :
    - generated by the algorithm
    - translated into Python
    - stored into the DB
    - reloaded from the DB
    - translated into C++
    """

    @patch.object(Config, 'nutrient_calculations', [])
    def setUp(self):
        super().setUp()
        self.init_default_ingredient_settings()
        self.init_default_nutrients()
        # Everything will be raw, not_cooked
        self.init_db_profile_eater()

        # DishTypes : one aggregated and two simple
        self.full_meal, self.main, self.side = self.create_db_dishtype_aggregated()
        self.plus = self.create_db_dishtype("plus")
        
        # One recipe of each type
        self.recipe_full = self.create_db_recipe(name = "Recipe full meal", dish_types=[self.full_meal])
        self.recipe_main = self.create_db_recipe(name = "Recipe main", dish_types=[self.main])
        self.recipe_side = self.create_db_recipe(name = "Recipe side", dish_types=[self.side])

        # Planning
        planning = self.create_db_planning()
        self.days = planning.sorted_days

        # Mealslots :
        # * one with one aggregated dish_type
        # * one with two dish elements of simple dish_type
        mealslot_agg = self.create_db_mealslot(self.days[0])
        mealslot_two_dishes = self.create_db_mealslot(self.days[0])
        
        self.dish_agg = self.create_db_dish(mealslot_agg, self.full_meal, order=0)
        # nb : the order of elements is important
        self.dish_single = self.create_db_dish(mealslot_two_dishes, self.side, order=0)

        MainRecipeStorage.initialize(force=True)


    def test_solution_is_valid_when_reloaded(self):
        """
        We generate a solution --  a naive one
        store the solution, reload it, and check if it's valid
        """
        for i in range(10):
            # We create a probem and solve it
            problem = Problem(self.days, enable_diet=False)
            problem.clean_previous_solution()
            solution = problem.solve_naive()
            self.assertTrue(solution.isValid(True))
            problem.save_solution(solution)

            # Checking what's in the solution
            agg_recipes = [r.recipe_id for r in solution.get_recipes()[self.dish_agg.id]]
            single_recipes = [r.recipe_id for r in solution.get_recipes()[self.dish_single.id]]
            self.assertTrue(agg_recipes == [self.recipe_full.id] or agg_recipes == [self.recipe_main.id, self.recipe_side.id])
            self.assertEqual(single_recipes, [self.recipe_side.id])

            # Reloading and checking it's still valid
            reloaded_solution = problem.build_current_solution()
            self.assertTrue(reloaded_solution.isValid(True))
