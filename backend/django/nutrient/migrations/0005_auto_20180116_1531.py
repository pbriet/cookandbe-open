# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-01-16 14:31
from __future__ import unicode_literals

from django.db import migrations, models


INDICATOR_PACKS = [
    {'key': 'default',
     'title': 'Pack "Equilibre de base"',
     'description': 'Les nutriments essentiels pour une alimentation équilibrée',
     'indicators': [
        "energiekilocalories",
        "proteines",
        "lipides",
        "fibres",
        "sucrestotaux",
        "sodium",
     ]},
    {'title': 'Pack "Anti-stress"',
     'description': 'Contrôle optimal de vos apports en magnésium et vitamines B afin de réduire la nervosité',
     'key': 'stress',
     'indicators': [
        'magnesium',
        'vitamineb1',
        'vitamineb2',
        'vitamineb3',
        'vitamineb9'
    ]},
    {'title': 'Pack "Système immunitaire"',
    'description': 'Contrôle des nutriments essentiels au bon fonctionnement du système immunitaire',
    'key': 'immune',
    'indicators': [
        "vitaminea",
        "vitaminec",
        "vitaminee",
        'vitamineb6',
        'cuivre',
        'zinc'
    ]},
    {'title': 'Pack "Solidité des os"',
     'description': 'Tous les apports optimaux pour le bon maintien du système osseux',
     'key': 'bones',
     'indicators': [
        'calcium',
        'phosphore',
        'cuivre'
    ]},
    {'title': 'Pack "Santé de la peau"',
    'description': 'Vitamines et minéraux ayant un impact fort sur les mécanismes cutanés',
    'key': 'skin',
    'indicators': [
        "vitaminea",
        'vitamineb3',
        'vitamineb5',
        "vitamineb12",
        'zinc'
    ]},
    {'title': 'Pack "Santé du coeur"',
    'description': 'Contrôle de la qualité des graisses et des vitamines essentielles au bon fonctionnement du coeur / du système artériel',
    'key': 'heart',
    'indicators': [
        "agmonoinsatures",
        "acidesgrassatures",
        "acidesgrasnocifs",
        "vitamineb9",
        "vitamineb12",
        "vitaminee",
    ]},
]

def create_nutrient_packs(apps, schema_editor):

    NutrientPack = apps.get_model('nutrient', 'NutrientPack')
    Nutrient     = apps.get_model('nutrient', 'Nutrient')

    default_pack = None
    for i, pack in enumerate(INDICATOR_PACKS):

        obj = NutrientPack.objects.create(title=pack['title'],
                     key=pack['key'],
                     description=pack['description'],
                     can_be_unchecked=pack['key'] != 'default',
                     order=i)

        nutrients = Nutrient.objects.filter(key__in=pack['indicators'])

        obj.nutrients.add(*nutrients)

        if pack['key'] == 'default':
            default_pack = pack


class Migration(migrations.Migration):

    dependencies = [
        ('nutrient', '0004_enablednutrient'),
    ]

    operations = [
        migrations.CreateModel(
            name='NutrientPack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('key', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('can_be_unchecked', models.BooleanField(default=False)),
                ('nutrients', models.ManyToManyField(to='nutrient.Nutrient')),
                ('order', models.IntegerField()),
            ],
        ),
        migrations.RemoveField(
            model_name='enablednutrient',
            name='nutrient',
        ),
        migrations.RemoveField(
            model_name='enablednutrient',
            name='user',
        ),
        migrations.DeleteModel(
            name='EnabledNutrient',
        ),
        migrations.RunPython(create_nutrient_packs)
    ]
